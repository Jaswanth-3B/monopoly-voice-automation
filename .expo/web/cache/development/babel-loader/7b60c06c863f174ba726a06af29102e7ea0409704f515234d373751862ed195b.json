{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  players: [],\n  properties: [],\n  transactions: [],\n  cards: []\n};\nconst gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    addPlayer: (state, action) => {\n      const newPlayer = {\n        id: String(state.players.length + 1),\n        name: String(state.players.length + 1),\n        money: action.payload.money,\n        position: action.payload.position,\n        properties: [],\n        cards: [],\n        token: action.payload.token,\n        tokenIcon: action.payload.tokenIcon,\n        color: action.payload.color\n      };\n      state.players.push(newPlayer);\n    },\n    updatePlayerMoney(state, action) {\n      const player = state.players.find(p => p.id === action.payload.playerId);\n      if (player) {\n        player.money += action.payload.amount;\n      }\n    },\n    addTransaction(state, action) {\n      state.transactions.push(action.payload);\n    },\n    updatePlayerPosition(state, action) {\n      const player = state.players.find(p => p.id === action.payload.playerId);\n      if (player) {\n        player.position = action.payload.position;\n      }\n    },\n    updatePropertyOwner(state, action) {\n      const property = state.properties.find(p => p.id === action.payload.propertyId);\n      if (property) {\n        property.owner = action.payload.ownerId;\n        const player = state.players.find(p => p.id === action.payload.ownerId);\n        if (player) {\n          player.properties.push(String(property.id));\n        }\n      }\n    },\n    initializeProperties(state, action) {\n      state.properties = action.payload;\n    }\n  }\n});\nexport const {\n  addPlayer,\n  updatePlayerMoney,\n  addTransaction,\n  updatePlayerPosition,\n  updatePropertyOwner,\n  initializeProperties\n} = gameSlice.actions;\nexport default gameSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","players","properties","transactions","cards","gameSlice","name","reducers","addPlayer","state","action","newPlayer","id","String","length","money","payload","position","token","tokenIcon","color","push","updatePlayerMoney","player","find","p","playerId","amount","addTransaction","updatePlayerPosition","updatePropertyOwner","property","propertyId","owner","ownerId","initializeProperties","actions","reducer"],"sources":["C:/Users/janu3/GitHub/Monopoly_Automator/monopoly-voice-automation/src/store/gameSlice.ts"],"sourcesContent":["// src/store/gameSlice.ts\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { Player, Property, Transaction, Card, GameState } from '../types/gameTypes';\r\n\r\nconst initialState: GameState = {\r\n  players: [],\r\n  properties: [],\r\n  transactions: [],\r\n  cards: []\r\n};\r\n\r\nexport interface AddPlayerPayload {\r\n  name: string;\r\n  money: number;\r\n  position: number;\r\n  token: string;\r\n  tokenIcon: string;\r\n  color: string;\r\n}\r\n\r\nconst gameSlice = createSlice({\r\n  name: 'game',\r\n  initialState,\r\n  reducers: {\r\n    addPlayer: (state, action) => {\r\n      const newPlayer = {\r\n        id: String(state.players.length + 1), // Simple sequential ID as string\r\n        name: String(state.players.length + 1), // Use sequential numbers for names\r\n        money: action.payload.money,\r\n        position: action.payload.position,\r\n        properties: [],\r\n        cards: [],\r\n        token: action.payload.token,\r\n        tokenIcon: action.payload.tokenIcon,\r\n        color: action.payload.color\r\n      };\r\n      state.players.push(newPlayer);\r\n    },\r\n    updatePlayerMoney(state, action: PayloadAction<{ playerId: string; amount: number }>) {\r\n      const player = state.players.find(p => p.id === action.payload.playerId);\r\n      if (player) {\r\n        player.money += action.payload.amount;\r\n      }\r\n    },\r\n    addTransaction(state, action: PayloadAction<Transaction>) {\r\n      state.transactions.push(action.payload);\r\n    },\r\n    updatePlayerPosition(state, action: PayloadAction<{ playerId: string; position: number }>) {\r\n      const player = state.players.find(p => p.id === action.payload.playerId);\r\n      if (player) {\r\n        player.position = action.payload.position;\r\n      }\r\n    },\r\n    updatePropertyOwner(state, action: PayloadAction<{ propertyId: number; ownerId: string }>) {\r\n      const property = state.properties.find(p => p.id === action.payload.propertyId);\r\n      if (property) {\r\n        property.owner = action.payload.ownerId;\r\n        // Also update the player's properties array\r\n        const player = state.players.find(p => p.id === action.payload.ownerId);\r\n        if (player) {\r\n          player.properties.push(String(property.id));\r\n        }\r\n      }\r\n    },\r\n    initializeProperties(state, action: PayloadAction<Property[]>) {\r\n      state.properties = action.payload;\r\n    }\r\n  }\r\n});\r\n\r\nexport const {\r\n  addPlayer,\r\n  updatePlayerMoney,\r\n  addTransaction,\r\n  updatePlayerPosition,\r\n  updatePropertyOwner,\r\n  initializeProperties\r\n} = gameSlice.actions;\r\n\r\nexport default gameSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}