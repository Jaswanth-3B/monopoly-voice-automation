{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useDispatch } from 'react-redux';\nimport GameBoard from \"../components/GameBoard/GameBoard\";\nimport PlayerDashboard from \"../components/PlayerDashboard/PlayerDashboard\";\nimport PlayerManagement from \"../components/PlayerManagement/PlayerManagement\";\nimport VoiceRecognition from \"../components/VoiceRecognition/VoiceRecognition\";\nimport { initializeProperties } from \"../store/gameSlice\";\nimport { THEME_COLORS } from \"../theme/colors\";\nimport { monopolyProperties } from \"../data/monopolyProperties\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar GameContent = function GameContent() {\n  var dispatch = useDispatch();\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    notification = _useState2[0],\n    setNotification = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    showNotification = _useState4[0],\n    setShowNotification = _useState4[1];\n  useEffect(function () {\n    dispatch(initializeProperties(monopolyProperties));\n  }, [dispatch]);\n  var handleVoiceCommand = function handleVoiceCommand(command) {\n    console.log('Received command:', command);\n    setNotification(`Command received: ${command}`);\n    setShowNotification(true);\n  };\n  var handleCloseNotification = function handleCloseNotification() {\n    setShowNotification(false);\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(View, {\n      style: styles.boardContainer,\n      children: _jsx(GameBoard, {})\n    }), _jsxs(View, {\n      style: styles.controlsContainer,\n      children: [_jsx(View, {\n        style: styles.voiceContainer,\n        children: _jsx(VoiceRecognition, {\n          onCommand: handleVoiceCommand,\n          notification: notification,\n          showNotification: showNotification,\n          onCloseNotification: handleCloseNotification\n        })\n      }), _jsx(View, {\n        style: styles.playerManagementContainer,\n        children: _jsx(PlayerManagement, {})\n      }), _jsx(View, {\n        style: styles.playerDashboardContainer,\n        children: _jsx(PlayerDashboard, {})\n      })]\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    backgroundColor: THEME_COLORS.background\n  },\n  boardContainer: {\n    flex: 3,\n    backgroundColor: 'white',\n    borderRadius: 8,\n    margin: 4,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  controlsContainer: {\n    flex: 1,\n    backgroundColor: THEME_COLORS.cards,\n    borderRadius: 8,\n    margin: 4,\n    padding: 8,\n    gap: 8\n  },\n  voiceContainer: {\n    marginBottom: 8\n  },\n  playerManagementContainer: {\n    marginBottom: 8\n  },\n  playerDashboardContainer: {\n    flex: 1\n  }\n});\nexport default GameContent;","map":{"version":3,"names":["React","useState","useEffect","View","StyleSheet","useDispatch","GameBoard","PlayerDashboard","PlayerManagement","VoiceRecognition","initializeProperties","THEME_COLORS","monopolyProperties","jsx","_jsx","jsxs","_jsxs","GameContent","dispatch","_useState","_useState2","_slicedToArray","notification","setNotification","_useState3","_useState4","showNotification","setShowNotification","handleVoiceCommand","command","console","log","handleCloseNotification","style","styles","container","children","boardContainer","controlsContainer","voiceContainer","onCommand","onCloseNotification","playerManagementContainer","playerDashboardContainer","create","flex","flexDirection","backgroundColor","background","borderRadius","margin","justifyContent","alignItems","cards","padding","gap","marginBottom"],"sources":["C:/Users/janu3/GitHub/Monopoly_Automator/monopoly-voice-automation/src/screens/GameContent.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { View, StyleSheet } from 'react-native';\r\nimport { useDispatch } from 'react-redux';\r\nimport GameBoard from '../components/GameBoard/GameBoard';\r\nimport PlayerDashboard from '../components/PlayerDashboard/PlayerDashboard';\r\nimport PlayerManagement from '../components/PlayerManagement/PlayerManagement';\r\nimport VoiceRecognition from '../components/VoiceRecognition/VoiceRecognition';\r\nimport { initializeProperties } from '../store/gameSlice';\r\nimport { THEME_COLORS } from '../theme/colors';\r\nimport { monopolyProperties } from '../data/monopolyProperties';\r\n\r\nconst GameContent: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const [notification, setNotification] = useState<string>('');\r\n  const [showNotification, setShowNotification] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    dispatch(initializeProperties(monopolyProperties));\r\n  }, [dispatch]);\r\n\r\n  const handleVoiceCommand = (command: string) => {\r\n    console.log('Received command:', command);\r\n    // Execute command logic here\r\n    setNotification(`Command received: ${command}`);\r\n    setShowNotification(true);\r\n  };\r\n\r\n  const handleCloseNotification = () => {\r\n    setShowNotification(false);\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      {/* Left Column - Game Board */}\r\n      <View style={styles.boardContainer}>\r\n        <GameBoard />\r\n      </View>\r\n\r\n      {/* Right Column - Controls and Info */}\r\n      <View style={styles.controlsContainer}>\r\n        <View style={styles.voiceContainer}>\r\n          <VoiceRecognition \r\n            onCommand={handleVoiceCommand} \r\n            notification={notification}\r\n            showNotification={showNotification}\r\n            onCloseNotification={handleCloseNotification}\r\n          />\r\n        </View>\r\n\r\n        <View style={styles.playerManagementContainer}>\r\n          <PlayerManagement />\r\n        </View>\r\n\r\n        <View style={styles.playerDashboardContainer}>\r\n          <PlayerDashboard />\r\n        </View>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    flexDirection: 'row',\r\n    backgroundColor: THEME_COLORS.background,\r\n  },\r\n  boardContainer: {\r\n    flex: 3,\r\n    backgroundColor: 'white',\r\n    borderRadius: 8,\r\n    margin: 4,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  controlsContainer: {\r\n    flex: 1,\r\n    backgroundColor: THEME_COLORS.cards,\r\n    borderRadius: 8,\r\n    margin: 4,\r\n    padding: 8,\r\n    gap: 8,\r\n  },\r\n  voiceContainer: {\r\n    marginBottom: 8,\r\n  },\r\n  playerManagementContainer: {\r\n    marginBottom: 8,\r\n  },\r\n  playerDashboardContainer: {\r\n    flex: 1,\r\n  },\r\n});\r\n\r\nexport default GameContent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}